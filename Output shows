## Output Simulation

import open3d as o3d

# Load or generate a point cloud
point_cloud = o3d.geometry.PointCloud()
point_cloud.points = o3d.utility.Vector3dVector(np.random.rand(1000, 3))  # Example random points

# Visualize the point cloud
o3d.visualization.draw_geometries([point_cloud], window_name="Point Cloud Visualization")

def visualize_segmented_pockets(segmented_pockets):
    for idx, pocket in enumerate(segmented_pockets):
        pocket_cloud = o3d.geometry.PointCloud()
        pocket_cloud.points = o3d.utility.Vector3dVector(pocket)
        o3d.visualization.draw_geometries([pocket_cloud], window_name=f"Segmented Pocket {idx + 1}")

def visualize_icp_alignment(source_cloud, target_cloud, transformation):
    source_transformed = source_cloud.transform(transformation)
    o3d.visualization.draw_geometries([source_transformed, target_cloud], window_name="ICP Alignment")

import cv2

def visualize_pallet_detection(image, prediction):
    x, y, w, h = prediction  # Example bounding box coordinates
    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
    cv2.imshow("Pallet Detection", image)
    cv2.waitKey(0)

import matplotlib.pyplot as plt

# Sample data
epochs = range(1, 21)
accuracy = [0.75 + i * 0.01 for i in epochs]  # Example accuracy improving each epoch

plt.figure(figsize=(10, 5))
plt.plot(epochs, accuracy, label='Training Accuracy')
plt.title('Training Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.show()

##Output - Comparison of Segmentation Algorithms Suppose you want to show how DBSCAN performs better in segmenting point clouds compared to other methods

import matplotlib.pyplot as plt
import numpy as np

# Sample data for segmentation accuracy
algorithms = ['K-means', 'Hierarchical', 'DBSCAN']
accuracy = [0.85, 0.80, 0.95]  # Hypothetical accuracy values

plt.figure(figsize=(8, 5))
plt.bar(algorithms, accuracy, color=['blue', 'green', 'red'])
plt.xlabel('Segmentation Algorithms')
plt.ylabel('Accuracy')
plt.title('Comparison of Segmentation Algorithm Accuracy')
plt.ylim(0.7, 1.0)  # Set limits for y-axis to make differences more visible
plt.show()
def visualize_segmented_pockets(segmented_pockets):
    if not segmented_pockets:
        logging.warning("No segmented pockets to visualize.")
        return
    for idx, pocket in enumerate(segmented_pockets):
        pocket_cloud = o3d.geometry.PointCloud()
        pocket_cloud.points = o3d.utility.Vector3dVector(pocket)
        # Save visualization as an image
        o3d.visualization.draw_geometries([pocket_cloud], window_name=f"Pocket {idx+1}")
        # To save as an image (optional):
        vis = o3d.visualization.Visualizer()
        vis.create_window()
        vis.add_geometry(pocket_cloud)
        vis.capture_screen_image(f"pocket_{idx+1}.png")
        vis.destroy_window()


##Outputs - CNN Training Progress To demonstrate the efficiency of your CNN training, plot both the accuracy and loss over epochs:

epochs = list(range(1, 21))
train_accuracy = [0.70 + i * 0.01 for i in range(20)]  # Example training accuracy
val_accuracy = [0.68 + i * 0.01 for i in range(20)]    # Example validation accuracy

train_loss = [0.6 - i * 0.02 for i in range(20)]       # Example training loss
val_loss = [0.65 - i * 0.02 for i in range(20)]        # Example validation loss

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))

# Plot accuracy
ax1.plot(epochs, train_accuracy, 'b', label='Training Accuracy')
ax1.plot(epochs, val_accuracy, 'r', label='Validation Accuracy')
ax1.set_title('Training and Validation Accuracy')
ax1.set_xlabel('Epochs')
ax1.set_ylabel('Accuracy')
ax1.legend()

# Plot loss
ax2.plot(epochs, train_loss, 'b', label='Training Loss')
ax2.plot(epochs, val_loss, 'r', label='Validation Loss')
ax2.set_title('Training and Validation Loss')
ax2.set_xlabel('Epochs')
ax2.set_ylabel('Loss')
ax2.legend()

plt.show()

import matplotlib.pyplot as plt
from keras.callbacks import History

# During training, save history
history = model.fit(...)

# Plot accuracy and loss
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title("CNN Training Performance")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()
plt.savefig("cnn_accuracy.png")

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title("CNN Training Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()
plt.savefig("cnn_loss.png")

##Output- Load Weight Validation Visualize the outcomes of your load weight validation checks to highlight the system's ability to correctly flag overloads:

weights = [1400, 1200, 1600, 1000, 1300]  # Simulated weights of pallets
validation = ['Valid', 'Valid', 'Overload', 'Valid', 'Valid']  # Validation results

colors = ['green' if v == 'Valid' else 'red' for v in validation]

plt.figure(figsize=(10, 5))
plt.bar(range(1, 6), weights, color=colors)
plt.axhline(y=1500, color='gray', linestyle='--', label='Maximum Allowable Weight')
plt.xlabel('Pallet Number')
plt.ylabel('Weight (kg)')
plt.title('Pallet Weight Validation')
plt.legend()
plt.show()


##Segmentation o/p's 
##After Segmentation

def visualize_segmented_pockets(segmented_pockets):
    if not segmented_pockets:
        logging.warning("No segmented pockets to visualize.")
        return
    for idx, pocket in enumerate(segmented_pockets):
        pocket_cloud = o3d.geometry.PointCloud()
        pocket_cloud.points = o3d.utility.Vector3dVector(pocket)
        # Save visualization as an image
        o3d.visualization.draw_geometries([pocket_cloud], window_name=f"Pocket {idx+1}")
        # To save as an image (optional):
        vis = o3d.visualization.Visualizer()
        vis.create_window()
        vis.add_geometry(pocket_cloud)
        vis.capture_screen_image(f"pocket_{idx+1}.png")
        vis.destroy_window()
